Shader "Custom/Transparency/OccupancyRenderer" {
	// from "Hair Self Shadowing and Transparency Depth Ordering Using Occupancy maps"
	SubShader{
	Tags { "RenderType" = "Opaque" }
	//Tags {"Queue" = "Transparent" "RenderType" = "Transparent" }
	LOD 100
		ZWRITE On
			//ZWRITE Off
			Cull Off

		// Bitwise OR
		//BlendOp LogicalOr

		Pass{
		CGPROGRAM
		#pragma vertex vert
		#pragma fragment frag
		#include "UnityCG.cginc"

		#include "../HairCommon.cginc"

		// generated by TransparencySorting
		sampler2D _MainDepth;
		sampler2D _MainOccupancy;

		struct v2f {
			float4 pos : SV_POSITION;
			float4 scrPos : TEXCOORD1;
			float3 viewPos : TEXCOORD2;
		};

		//Vertex Shader
		v2f vert(appdata_base v) {
			v2f o;
			o.pos = UnityObjectToClipPos(v.vertex);
			o.scrPos = ComputeScreenPos(o.pos);
			o.viewPos = UnityObjectToViewPos(v.vertex);

			return o;
		}

		//Fragment Shader
		float4 frag(v2f i) : COLOR {
			i.scrPos /= i.scrPos.w;

			int4 nearFar = tex2D(_MainOccupancy, i.scrPos);

			//nearFar = min(1, nearFar);

			float4 col;
			if (nearFar.r > 0 || nearFar.g > 0 || nearFar.b > 0 || nearFar.a > 0) {
				float4 col = nearFar;
				//col /= 128;
				//col = 1;
			}
			return col;
		}
		ENDCG
		}
	}
		FallBack "Diffuse"
}