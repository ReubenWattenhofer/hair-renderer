Shader "Custom/Transparency/DepthRangeMap" {
	SubShader{
	Tags { "RenderType" = "Opaque" }
	//Tags {"Queue" = "Transparent" "RenderType" = "Transparent" }
	LOD 100
	//ZWRITE On
		ZWRITE Off
		Cull Off

		// from "Hair Self Shadowing and Transparency Depth Ordering Using Occupancy maps"
		// Min blending for color, Max blending for alpha
		BlendOp Min, Max


		Pass{
		CGPROGRAM
		#pragma vertex vert
		#pragma fragment frag
		#include "UnityCG.cginc"

		#include "../HairCommon.cginc"


		//sampler2D _CameraDepthTexture;
		//sampler2D _DepthCulled;

		// generated by TestScreenPosRunner
		//float4 _DepthCameraPlanes;

		struct v2f {
			float4 pos : SV_POSITION;
			//float4 scrPos : TEXCOORD1;
			float3 viewPos : TEXCOORD2;
		};

		//Vertex Shader
		v2f vert(appdata_base v) {
			v2f o;
			o.pos = UnityObjectToClipPos(v.vertex);
			//o.scrPos = ComputeScreenPos(o.pos);
			o.viewPos = UnityObjectToViewPos(v.vertex);

			return o;
		}

		//Fragment Shader
		float4 frag(v2f i) : COLOR{
			float depthValue = Normalize_Depth(-i.viewPos.z, _ProjectionParams.y, _ProjectionParams.z);

			float4 depth;

			// Near distance
			depth.r = depthValue;
			depth.g = 0;
			depth.b = 0;

			// Far distance
			depth.a = depthValue;
			//discard;
			return depth;

		}
		ENDCG
		}
	}
		FallBack "Diffuse"
}