Shader "Custom/Transparency/Background_mask" {
	SubShader{
	Tags { "RenderType" = "Opaque" }
	//Tags {"Queue" = "Transparent" "RenderType" = "Transparent" }
	LOD 100
		ZWRITE On
		//ZWRITE Off
		Cull Off

		// Bitwise OR
		//BlendOp LogicalOr

		Pass{
		CGPROGRAM
		#pragma vertex vert
		#pragma fragment frag
		#include "UnityCG.cginc"

		#include "../HairCommon.cginc"

		// generated by TransparencySorting
		//sampler2D _MainDepth;
		//sampler2D _Hair;
		//sampler2D _MainSlab;


		struct v2f {
			float4 pos : SV_POSITION;
			//float4 scrPos : TEXCOORD1;
			//float3 viewPos : TEXCOORD2;
		};

		//Vertex Shader
		v2f vert(appdata_base v) {
			v2f o;
			o.pos = UnityObjectToClipPos(v.vertex);
			//o.scrPos = ComputeScreenPos(o.pos);
			//o.viewPos = UnityObjectToViewPos(v.vertex);

			return o;
		}

		//Fragment Shader
		float4 frag(v2f i) : COLOR {
			float4 col = 0;
			return col;
		}
		ENDCG
		}
	}
		FallBack "Diffuse"
}